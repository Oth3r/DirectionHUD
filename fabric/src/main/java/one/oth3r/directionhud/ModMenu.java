package one.oth3r.directionhud;

import com.terraformersmc.modmenu.api.ConfigScreenFactory;
import com.terraformersmc.modmenu.api.ModMenuApi;
import dev.isxander.yacl3.api.*;
import dev.isxander.yacl3.api.controller.*;
import net.minecraft.text.Text;
import one.oth3r.directionhud.common.files.config;
import one.oth3r.directionhud.utils.CUtl;
import one.oth3r.directionhud.utils.Utl;

import java.awt.*;
import java.util.List;

public class ModMenu implements ModMenuApi {
    @Override
    public ConfigScreenFactory<?> getModConfigScreenFactory() {
        return parent -> YetAnotherConfigLib.createBuilder().save(config::save)
                .title(Text.of("DirectionHUD"))
                .category(ConfigCategory.createBuilder()
                        .name(CUtl.tLang("config"))
                        .tooltip(CUtl.tLang("config_info"))
                        .option(Option.<Integer>createBuilder()
                                .name(CUtl.tLang("config.max_xz"))
                                .description(OptionDescription.of(CUtl.tLang("config.max_xz.info")))
                                .binding(config.defaults.MAXxz, () -> config.MAXxz, n -> config.MAXxz = n)
                                .controller(IntegerFieldControllerBuilder::create)
                                .build())
                        .option(Option.<Integer>createBuilder()
                                .name(CUtl.tLang("config.max_y"))
                                .description(OptionDescription.of(CUtl.tLang("config.max_y.info")))
                                .binding(config.defaults.MAXy, () -> config.MAXy, n -> config.MAXy = n)
                                .controller(IntegerFieldControllerBuilder::create)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(CUtl.tLang("config.dest_saving"))
                                .description(OptionDescription.of(CUtl.tLang("config.dest_saving.info")))
                                .binding(config.defaults.DESTSaving, () -> config.DESTSaving, n -> config.DESTSaving = n)
                                .controller(TickBoxControllerBuilder::create)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(CUtl.tLang("config.social"))
                                .description(OptionDescription.of(CUtl.tLang("config.social.info")))
                                .binding(config.defaults.social, () -> config.social, n -> config.social = n)
                                .controller(TickBoxControllerBuilder::create)
                                .build())
                        .option(Option.<Integer>createBuilder()
                                .name(CUtl.tLang("config.max_saved"))
                                .description(OptionDescription.of(CUtl.tLang("config.max_saved.info")))
                                .binding(config.defaults.MAXSaved, () -> config.MAXSaved, n -> config.MAXSaved = n)
                                .controller(IntegerFieldControllerBuilder::create)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(CUtl.tLang("config.death_saving"))
                                .description(OptionDescription.of(CUtl.tLang("config.death_saving.info")))
                                .binding(config.defaults.deathsaving, () -> config.deathsaving, n -> config.deathsaving = n)
                                .controller(TickBoxControllerBuilder::create)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(CUtl.tLang("config.hud_editing"))
                                .description(OptionDescription.of(CUtl.tLang("config.hud_editing.info")))
                                .binding(config.defaults.HUDEditing, () -> config.HUDEditing, n -> config.HUDEditing = n)
                                .controller(TickBoxControllerBuilder::create)
                                .build())
                        .option(Option.<Integer>createBuilder()
                                .name(CUtl.tLang("config.hud_refresh"))
                                .description(OptionDescription.of(CUtl.tLang("config.hud_refresh.info")))
                                .binding(config.defaults.HUDRefresh, () -> config.HUDRefresh, n -> config.HUDRefresh = n)
                                .controller(opt -> IntegerSliderControllerBuilder.create(opt).step(1).range(1,20))
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(CUtl.tLang("config.online_mode"))
                                .description(OptionDescription.of(CUtl.tLang("config.online_mode.info")))
                                .binding(config.defaults.online, () -> config.online, n -> config.online = n)
                                .controller(TickBoxControllerBuilder::create)
                                .build())
                        .group(ListOption.<String>createBuilder()
                                .name(CUtl.tLang("config.dimensions"))
                                .description(OptionDescription.of(CUtl.lang("config.dimensions.info").append("\n")
                                        .append(CUtl.lang("config.dimensions.info_2").color('c')).b()))
                                .binding(config.defaults.dimensions, () -> config.dimensions, n -> config.dimensions = n)
                                .controller(StringControllerBuilder::create)
                                .initial("")
                                .build())
                        .group(ListOption.<String>createBuilder()
                                .name(CUtl.tLang("config.dimension_ratios"))
                                .description(OptionDescription.of(CUtl.tLang("config.dimension_ratios.info")))
                                .binding(config.defaults.dimensionRatios, () -> config.dimensionRatios, n -> config.dimensionRatios = n)
                                .controller(StringControllerBuilder::create)
                                .initial("")
                                .build())
                        .build())
                .category(ConfigCategory.createBuilder()
                        .name(CUtl.tLang("config.hud"))
                        .tooltip(CUtl.tLang("config.hud_info"))
                        .option(Option.<Boolean>createBuilder()
                                .name(CUtl.tLang("config.hud.enabled"))
                                .description(OptionDescription.of(CUtl.tLang("config.hud.enabled.description")))
                                .binding(config.defaults.HUDEnabled, () -> config.HUDEnabled, n -> config.HUDEnabled = n)
                                .controller(TickBoxControllerBuilder::create)
                                .build())
                        .group(ListOption.<String>createBuilder()
                                .name(CUtl.tLang("config.hud.order"))
                                .description(OptionDescription.of(CUtl.tLang("config.hud.order.description")))
                                .binding(List.of(config.defaults.HUDOrder.split(" ")),
                                        () -> List.of(config.HUDOrder.split(" ")), n -> config.HUDOrder = String.join(" ", n))
                                .controller(StringControllerBuilder::create)
                                .initial("")
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.tLang("config.hud.module"))
                                .description(OptionDescription.of(CUtl.tLang("config.hud.module.description")))
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("hud.module.coordinates"))
                                        .binding(config.defaults.HUDCoordinates, () -> config.HUDCoordinates, n -> config.HUDCoordinates = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("hud.module.destination"))
                                        .binding(config.defaults.HUDDestination, () -> config.HUDDestination, n -> config.HUDDestination = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("hud.module.distance"))
                                        .binding(config.defaults.HUDDistance, () -> config.HUDDistance, n -> config.HUDDistance = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("hud.module.tracking"))
                                        .binding(config.defaults.HUDTracking, () -> config.HUDTracking, n -> config.HUDTracking = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("hud.module.direction"))
                                        .binding(config.defaults.HUDDirection, () -> config.HUDDirection, n -> config.HUDDirection = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("hud.module.time"))
                                        .binding(config.defaults.HUDTime, () -> config.HUDTime, n -> config.HUDTime = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("hud.module.weather"))
                                        .binding(config.defaults.HUDWeather, () -> config.HUDWeather, n -> config.HUDWeather = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.tLang("config.hud.setting"))
                                .description(OptionDescription.of(CUtl.tLang("config.hud.setting.description")))
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("config.hud.setting.24hr"))
                                        .binding(config.defaults.HUD24HR, () -> config.HUD24HR, n -> config.HUD24HR = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.tLang("config.hud.color_pri"))
                                .description(OptionDescription.of(CUtl.tLang("config.hud.color_pri.description")))
                                .option(Option.<Color>createBuilder()
                                        .name(CUtl.tLang("config.hud.color"))
                                        .binding(Utl.color.toColor(config.defaults.HUDPrimaryColor),
                                                () -> Utl.color.toColor(config.HUDPrimaryColor),
                                                n -> config.HUDPrimaryColor = String.format("#%02x%02x%02x", n.getRed(), n.getGreen(), n.getBlue()))
                                        .controller(ColorControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("config.hud.color.bold"))
                                        .binding(config.defaults.HUDPrimaryBold, () -> config.HUDPrimaryBold, n -> config.HUDPrimaryBold = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("config.hud.color.italics"))
                                        .binding(config.defaults.HUDPrimaryItalics, () -> config.HUDPrimaryItalics, n -> config.HUDPrimaryItalics = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("config.hud.color.rainbow"))
                                        .binding(config.defaults.HUDPrimaryRainbow, () -> config.HUDPrimaryRainbow, n -> config.HUDPrimaryRainbow = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.tLang("config.hud.color_sec"))
                                .description(OptionDescription.of(CUtl.tLang("config.hud.color_sec.description")))
                                .option(Option.<Color>createBuilder()
                                        .name(CUtl.tLang("config.hud.color"))
                                        .binding(Utl.color.toColor(config.defaults.HUDSecondaryColor),
                                                () -> Utl.color.toColor(config.HUDSecondaryColor),
                                                n -> config.HUDSecondaryColor = String.format("#%02x%02x%02x", n.getRed(), n.getGreen(), n.getBlue()))
                                        .controller(ColorControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("config.hud.color.bold"))
                                        .binding(config.defaults.HUDSecondaryBold, () -> config.HUDSecondaryBold, n -> config.HUDSecondaryBold = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("config.hud.color.italics"))
                                        .binding(config.defaults.HUDSecondaryItalics, () -> config.HUDSecondaryItalics, n -> config.HUDSecondaryItalics = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("config.hud.color.rainbow"))
                                        .binding(config.defaults.HUDSecondaryRainbow, () -> config.HUDSecondaryRainbow, n -> config.HUDSecondaryRainbow = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        .build())
                .category(ConfigCategory.createBuilder()
                        .name(CUtl.tLang("config.dest"))
                        .tooltip(CUtl.tLang("config.dest_info"))
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.tLang("dest.setting.destination"))
                                .description(OptionDescription.of(CUtl.tLang("config.dest.description")))
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("dest.setting.autoclear"))
                                        .binding(config.defaults.DESTAutoClear, () -> config.DESTAutoClear, n -> config.DESTAutoClear = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Integer>createBuilder()
                                        .name(CUtl.tLang("config.dest.autoclear_rad"))
                                        .binding(config.defaults.DESTAutoClearRad, () -> config.DESTAutoClearRad, n -> config.DESTAutoClearRad = n)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt).step(1).range(1, 15))
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("dest.setting.ylevel"))
                                        .binding(config.defaults.DESTYLevel, () -> config.DESTYLevel, n -> config.DESTYLevel = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("dest.setting.autoconvert"))
                                        .binding(config.defaults.DESTAutoConvert, () -> config.DESTAutoConvert, n -> config.DESTAutoConvert = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.tLang("dest.setting.particle"))
                                .description(OptionDescription.of(CUtl.tLang("config.dest.particle.description")))
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("config.dest.particle.line"))
                                        .binding(config.defaults.DESTLineParticles, () -> config.DESTLineParticles, n -> config.DESTLineParticles = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(CUtl.tLang("config.dest.particle.line_c"))
                                        .binding(Utl.color.toColor(config.defaults.DESTLineParticleColor),
                                                () -> Utl.color.toColor(config.DESTLineParticleColor),
                                                n -> config.DESTLineParticleColor = String.format("#%02x%02x%02x", n.getRed(), n.getGreen(), n.getBlue()))
                                        .controller(ColorControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("config.dest.particle.dest"))
                                        .binding(config.defaults.DESTDestParticles, () -> config.DESTDestParticles, n -> config.DESTDestParticles = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(CUtl.tLang("config.dest.particle.dest_c"))
                                        .binding(Utl.color.toColor(config.defaults.DESTDestParticleColor),
                                                () -> Utl.color.toColor(config.DESTDestParticleColor),
                                                n -> config.DESTDestParticleColor = String.format("#%02x%02x%02x", n.getRed(), n.getGreen(), n.getBlue()))
                                        .controller(ColorControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("config.dest.particle.tracking"))
                                        .binding(config.defaults.DESTTrackingParticles, () -> config.DESTTrackingParticles, n -> config.DESTTrackingParticles = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(CUtl.tLang("config.dest.particle.tracking_c"))
                                        .binding(Utl.color.toColor(config.defaults.DESTTrackingParticleColor),
                                                () -> Utl.color.toColor(config.DESTTrackingParticleColor),
                                                n -> config.DESTTrackingParticleColor = String.format("#%02x%02x%02x", n.getRed(), n.getGreen(), n.getBlue()))
                                        .controller(ColorControllerBuilder::create)
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.tLang("dest.setting.features"))
                                .description(OptionDescription.of(CUtl.tLang("config.dest.feature.description")))
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("dest.setting.send"))
                                        .binding(config.defaults.DESTSend, () -> config.DESTSend, n -> config.DESTSend = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("dest.setting.track"))
                                        .binding(config.defaults.DESTTrack, () -> config.DESTTrack, n -> config.DESTTrack = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(CUtl.tLang("dest.setting.lastdeath"))
                                        .binding(config.defaults.DESTLastdeath, () -> config.DESTLastdeath, n -> config.DESTLastdeath = n)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        .build())
                .build().generateScreen(parent);
    }
}
